#!/usr/bin/env bash

set -e -o pipefail -p

cat << "EOF"
  ________  ________  ________   ________ ___  ________
 |\   ____\|\   __  \|\   ___  \|\  _____\\  \|\   ____\
 \ \  \___|\ \  \|\  \ \  \\ \  \ \  \__/\ \  \ \  \___|
  \ \  \    \ \  \\\  \ \  \\ \  \ \   __\\ \  \ \  \  ___
 __\ \  \____\ \  \\\  \ \  \\ \  \ \  \_| \ \  \ \  \|\  \
|\__\ \_______\ \_______\ \__\\ \__\ \__\   \ \__\ \_______\
\|__|\|_______|\|_______|\|__| \|__|\|__|    \|__|\|_______|
EOF

if [[ "${CODESPACES}" == "true" ]]; then
  DOTCONFIG_PATH="$(dirname "$(realpath "$0")")"
  rm -rf ~/.config
  ln -s "${DOTCONFIG_PATH}" "$HOME/.config"
fi

DOTCONFIG_PATH="$HOME/.config"

# Keep the computer awake for the duration of this script.
[[ $(command -v caffeinate) ]] && caffeinate -dusw $$ &

# Ask for the administrator password
sudo -v

# sudo keep-alive
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

# INT/TERM trap
trap 'exit 1' INT TERM

if [[ ! $(command -v brew) ]] && [[ "${CODESPACES}" != "true" ]]; then
  if [[ $(uname -s) == "Darwin" ]]; then
    # If we're using APFS, make a snapshot before doing anything.
    if mount | grep -q '/ (apfs'; then
      sudo -n tmutil enable
      sudo -n tmutil localsnapshot
    fi

    [[ $(command -v xcodebuild) ]] && sudo -n xcodebuild -license accept
  fi

  if [[ $(uname -s) == "Darwin" ]] || [[ $(uname -s) == "Linux" && "$(uname -p)" != "aarch64" ]]; then
    echo "Installing Homebrew"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
  fi
fi


ICLOUD_DRIVE=$(
if [[ -e "$HOME/Library/Mobile Documents/com~apple~CloudDocs" ]]; then
  echo "$HOME/Library/Mobile Documents/com~apple~CloudDocs"
fi
)
export ICLOUD_DRIVE

# iCloud Drive links
if [[ -e $ICLOUD_DRIVE ]] && [[ ! -e ~/.ssh ]]; then
  if [[ -e $ICLOUD_DRIVE/ssh ]]; then
    ln -s "$ICLOUD_DRIVE/ssh" ~/.ssh
  fi

  chmod 700 ~/.ssh
  chmod -R 600 ~/.ssh/*
  touch ~/.ssh/authorized_keys
  chmod 644 ~/.ssh/authorized_keys
fi

if [[ -e "${DOTCONFIG_PATH}/.git/config" ]] && grep -qe 'LukeChannings/' < "${DOTCONFIG_PATH}/.git/config"; then
  pushd "${DOTCONFIG_PATH}";
  git pull origin "$(git rev-parse --abbrev-ref HEAD)"
  popd
else
  echo "Linking config files for programs not using \$XDG_CONFIG_HOME"
  if [[ -e "${DOTCONFIG_PATH}" && -n "${PRESERVE_CONFIG}" ]]; then
    echo "Found existing ~/.config, moving it to ~/.config.old"
    mv "${DOTCONFIG_PATH}" "${DOTCONFIG_PATH}.old"
  fi
  git clone git@github.com:LukeChannings/.config.git "${DOTCONFIG_PATH}"
fi

if [[ $(uname -s) == 'Darwin' ]]; then
  "${DOTCONFIG_PATH}/install.macos"
fi

if [[ $(uname -s) == 'Linux' ]]; then
  "${DOTCONFIG_PATH}/install.linux"
fi

# shellcheck source=/dev/null
. "$HOME/.profile"

if [[ "$SHELL" == "bash" ]]; then
  # shellcheck source=/dev/null
  . "$HOME/.bashrc"
fi

fish -c 'fundle install'

# Set FISH as default shell
command -v fish | sudo -n tee -a /etc/shells
sudo -n chsh -s "$(command -v fish)" "$(whoami)"

ln -fs "${DOTCONFIG_PATH}/editorconfig" ~/.editorconfig
ln -fs "${DOTCONFIG_PATH}/tern/tern_config" ~/.tern-config
ln -fs "${DOTCONFIG_PATH}/tmux/config" ~/.tmux.conf
ln -fs "${DOTCONFIG_PATH}/vim" ~/.vim

vim --not-a-term +PlugUpgrade +PlugInstall +qall
